import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load an image from your chosen database
image = cv2.imread('/content/_0da62675-aa42-40be-97f5-eba300d42d2a.jpeg')

# Convert the image to grayscale
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Noise removal using GaussianBlur
blur = cv2.GaussianBlur(gray, (5,5), 0)

# Thresholding to create a binary image
_, thresh = cv2.threshold(blur, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)

# Sure background area
sure_bg = cv2.dilate(thresh, None, iterations=3)

# Finding sure foreground area
dist_transform = cv2.distanceTransform(thresh, cv2.DIST_L2, 5)
_, sure_fg = cv2.threshold(dist_transform, 0.7*dist_transform.max(), 255, 0)

# Finding unknown region
sure_fg = np.uint8(sure_fg)
unknown = cv2.subtract(sure_bg, sure_fg)

# Marker labelling
_, markers = cv2.connectedComponents(sure_fg)
markers = markers + 1
markers[unknown == 255] = 0

# Apply watershed algorithm
markers = cv2.watershed(image, markers)
image[markers == -1] = [0, 0, 255]  # Mark watershed boundaries in red

# Display the results
plt.subplot(221), plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB)), plt.title('Original Image')
plt.subplot(222), plt.imshow(thresh, cmap='gray'), plt.title('Thresholded Image')
plt.subplot(223), plt.imshow(sure_bg, cmap='gray'), plt.title('Sure Background')
plt.subplot(224), plt.imshow(sure_fg, cmap='gray'), plt.title('Sure Foreground')

plt.show()
