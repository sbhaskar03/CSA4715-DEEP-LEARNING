import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load an image (replace 'path/to/your/image.jpg' with the actual path)
image = cv2.imread('/content/ani6.jpg')

# Convert the image to grayscale
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Apply GaussianBlur to reduce noise and help with segmentation
blur = cv2.GaussianBlur(gray, (5, 5), 0)

# Threshold the image to create a binary mask
_, thresh = cv2.threshold(blur, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)

# Perform morphological operations to clean up the mask
kernel = np.ones((3, 3), np.uint8)
opening = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, kernel, iterations=2)
sure_bg = cv2.dilate(opening, kernel, iterations=3)

# Calculate the distance transform
dist_transform = cv2.distanceTransform(opening, cv2.DIST_L2, 5)
_, sure_fg = cv2.threshold(dist_transform, 0.7 * dist_transform.max(), 255, 0)

# Find unknown region
sure_fg = np.uint8(sure_fg)
unknown = cv2.subtract(sure_bg, sure_fg)

# Label markers for watershed algorithm
_, markers = cv2.connectedComponents(sure_fg)
markers = markers + 1
markers[unknown == 255] = 0

# Apply watershed algorithm
markers = cv2.watershed(image, markers)
image[markers == -1] = [0, 0, 255]  # Mark watershed boundaries in red

# Display the results
plt.subplot(231), plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB)), plt.title('Original Image')
plt.subplot(232), plt.imshow(thresh, cmap='gray'), plt.title('Thresholded Image')
plt.subplot(233), plt.imshow(sure_bg, cmap='gray'), plt.title('Sure Background')
plt.subplot(234), plt.imshow(sure_fg, cmap='gray'), plt.title('Sure Foreground')
plt.subplot(235), plt.imshow(unknown, cmap='gray'), plt.title('Unknown Region')
plt.subplot(236), plt.imshow(markers, cmap='jet'), plt.title('Segmentation Result')

plt.show()
